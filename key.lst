C51 COMPILER V9.01   KEY                                                                   07/15/2018 12:25:10 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.obj
COMPILER INVOKED BY: B:\Keil C51\C51\BIN\C51.EXE src\key.c BROWSE DEBUG OBJECTEXTEND PRINT(.\key.lst) OBJECT(key.obj)

line level    source

   1          #include "reg51.h"
   2          
   3          #define KEY_LONG_PERIOD 50
   4          #define KEY_CONTINUE_PERIOD 10
   5          
   6          #define KEY_DOWN 0X02
   7          #define KEY_LONG 0x04
   8          #define KEY_CONTINUE 0x08
   9          #define KEY_UP 0x01
  10          
  11          #define KEY_STATE_INIT 0
  12          #define KEY_STATE_WOBBLE 1
  13          #define KEY_STATE_PRESS 2
  14          #define KEY_STATE_LONG 3
  15          #define KEY_STATE_CONTINUE 4
  16          #define KEY_STATE_RELEASE 5
  17          
  18          sbit key1 = P2^4;
  19          sbit key2 = P2^5;
  20          sbit key3 = P2^6;
  21          sbit key4 = P2^7;
  22          
  23          static int key_state ;
  24          static int temp ;
  25          static int key_time_count;
  26          static int last_key ;
  27          
  28          
  29          void key_init(void);
  30          int scan_key(void);
  31          void get_key(int *);
  32          
  33          void key_init()
  34          {
  35   1          P2 |= 0xf0;// 使用P2 口高四位做按键
  36   1          key1 = 1;
  37   1          key2 = 1;
  38   1          key3 = 1;
  39   1          key4 = 1;
  40   1          last_key = 0xf0;
  41   1          key_state = KEY_STATE_INIT;
  42   1      }
  43          int scan_key()
  44          {
  45   1          if(key1 == 0) return 0xe0;
  46   1          if(key2 == 0) return 0xd0;
  47   1          if(key3 == 0) return 0xb0;
  48   1          if(key4 == 0) return 0x70;
  49   1          return 0xf0;
  50   1      }
  51          
  52          void get_key(int *value)
  53          {
  54   1      
  55   1          temp = scan_key();
C51 COMPILER V9.01   KEY                                                                   07/15/2018 12:25:10 PAGE 2   

  56   1      
  57   1          switch (key_state)
  58   1          {
  59   2              case KEY_STATE_INIT :
  60   2              {
  61   3                  if(temp != 0xf0)
  62   3                  {
  63   4                      key_state = KEY_STATE_WOBBLE;
  64   4                  }
  65   3              }
  66   2              break;
  67   2      
  68   2              case KEY_STATE_WOBBLE:
  69   2              {
  70   3                  key_state = KEY_STATE_PRESS;
  71   3              }
  72   2              break;
  73   2      
  74   2              case KEY_STATE_PRESS :
  75   2              {
  76   3                  if(temp != 0xf0)
  77   3                  {
  78   4                      last_key = temp;
  79   4                      temp |= KEY_DOWN;
  80   4                      key_state = KEY_STATE_LONG;
  81   4                  }
  82   3                  else
  83   3                  {
  84   4                      key_state = KEY_STATE_INIT;
  85   4                  }
  86   3              }
  87   2              break;
  88   2      
  89   2              case KEY_STATE_LONG:
  90   2              {
  91   3                  if(temp != 0xf0)
  92   3                  {
  93   4                      if(++key_time_count > KEY_LONG_PERIOD)
  94   4                      {
  95   5                          key_time_count = 0;
  96   5                          temp |= KEY_LONG;
  97   5                          key_state = KEY_STATE_CONTINUE;
  98   5                      }
  99   4                  }
 100   3                  else
 101   3                  {
 102   4                      key_state = KEY_STATE_RELEASE;
 103   4                  }
 104   3              }
 105   2              break;
 106   2      
 107   2              case KEY_STATE_CONTINUE:
 108   2              {
 109   3                  if(temp != 0xf0)
 110   3                  {
 111   4                      if(++key_time_count > KEY_CONTINUE_PERIOD)
 112   4                      {
 113   5                          key_time_count = 0;
 114   5                          temp |= KEY_CONTINUE;
 115   5                      }
 116   4                  }
 117   3                  else
C51 COMPILER V9.01   KEY                                                                   07/15/2018 12:25:10 PAGE 3   

 118   3                  {
 119   4                      key_state = KEY_STATE_RELEASE;
 120   4                  }
 121   3              }
 122   2              break;
 123   2      
 124   2              case KEY_STATE_RELEASE:
 125   2              {
 126   3                  last_key |= KEY_UP;
 127   3                  temp = last_key;
 128   3                  key_state = KEY_STATE_INIT;
 129   3              }
 130   2              break;
 131   2      
 132   2              default: break;
 133   2      
 134   2          }
 135   1          *value = temp;
 136   1      
 137   1      }
 138          
 139          
 140          // void main()
 141          // {
 142          //     int key_value ;
 143          //     P0 = 0x11;
 144          //     P2 = 0xff;
 145          //
 146          //     key_init();
 147          //     while(1)
 148          //     {
 149          //         // get_key( &key_value);
 150          //         get_key(&key_value);
 151          //         if(key_value == (0xe0 | KEY_DOWN)) P0 = 0xf0 ;
 152          //         if(key_value == (0xe0 | KEY_LONG)) P0 = 0x0f ;
 153          //         if(key_value == (0xe0 | KEY_CONTINUE)) { P0 = 0xaa;}
 154          //         if(key_value == (0xe0 | KEY_UP)) P0 = 0x00 ;
 155          //     }
 156          // }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    261    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
